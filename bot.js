const { Telegraf } = require('telegraf')
const rateLimit = require('telegraf-ratelimit')

const request = require('request-promise')

const bot = new Telegraf(process.env.TOKEN)

const limitConfig = {
  window: 10000,
  limit: 1,
  onLimitExceeded: (ctx, next) => ctx.replyWithHTML('<b>–û—à–∏–±–∫–∞ ‚òπÔ∏è</b>\n–Ø –Ω–µ –º–æ–≥—É —Ç–∞–∫ —á–∞—Å—Ç–æ —Å —Ç–æ–±–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å.\n–ü–∏—à–∏ –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ.')
}

bot.start( ctx => {
  ctx.replyWithHTML(`<b>üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!</b>\n\nüéµ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å–µ –ø–ª–æ—â–∞–¥–∫–∏.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ - /help\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - @kirillsaint | kirillsaint.xyz\nGitHub - https://github.com/kirillsaint/musiclinksbot`)
})

bot.help(ctx => {
  ctx.replyWithHTML('<b>üéµ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å–µ –ø–ª–æ—â–∞–¥–∫–∏.</b>\n\n–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫:\n\nspotify\nitunes\nappleMusic\nyoutube\nyoutubeMusic\ngoogle\ngoogleStore\npandora\ndeezer\ntidal\namazonStore\namazonMusic\nsoundcloud\nnapster\nyandex\nspinrilla\naudius\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - @kirillsaint | kirillsaint.xyz\nGitHub - https://github.com/kirillsaint/musiclinksbot')
})

const LinksSearch = async(ctx) => {
  if (!ctx.message.text.indexOf('http') || !ctx.message.text.indexOf('https')){
    const options = {
      method: 'GET',
      uri: `https://api.song.link/v1-alpha.1/links?userCountry=RU&url=${ctx.message.text}`,
      json: true
    }
    request(options)
    .then(function (data) {
      ctx.replyWithHTML('<b>üîé –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫</b>').then((m) => {
        if(!data["pageUrl"]){
          ctx.replyWithHTML('<b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>')
        } else {
          var link = data["pageUrl"]
          try {
            var amazon = data["linksByPlatform"]['amazonMusic']['url']
          } catch {
            var amazon = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
          try {
            var amazonStore = data["linksByPlatform"]['amazonStore']['url']
          } catch {
            var amazonStore = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
          try {
            var deezer = data["linksByPlatform"]['deezer']['url']
          } catch {
            var deezer = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
          try {
            var appleMusic = data["linksByPlatform"]['appleMusic']['url']
          } catch {
            var appleMusic = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
          try {
            var soundcloud = data["linksByPlatform"]['soundcloud']['url']
          } catch {
            var soundcloud = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
          try {
            var spotify = data["linksByPlatform"]['spotify']['url']
          } catch {
            var spotify = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
          try {
            var yandex = data["linksByPlatform"]['yandex']['url']
          } catch {
            var yandex = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
          try {
            var youtube = data["linksByPlatform"]['youtube']['url']
          } catch {
            var youtube = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
          }
          bot.telegram.deleteMessage(ctx.chat.id, m.message_id)
          ctx.replyWithHTML(`<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n<b>Amazon Music</b> - ${amazon}\n<b>Amazon Store</b> - ${amazonStore}\n<b>Deezer</b> - ${deezer}\n<b>Apple Music</b> - ${appleMusic}\n<b>Soundcloud</b> - ${soundcloud}\n<b>Spotify</b> - ${spotify}\n<b>Yandex Music</b> - ${yandex}\n<b>YouTube</b> - ${youtube}\n\n<b>–°–º–∞—Ä—Ç —Å—Å—ã–ª–∫–∞</b> - ${link}`)
        }
    })
    })
    .catch(function (err) {
        ctx.replyWithHTML('<b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>')
    })
  } else {
    ctx.replyWithHTML('<b>–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–º–∞–Ω–¥—ã üò•</b>')
  }
}

bot.on('text', rateLimit(limitConfig), LinksSearch)

if(process.env.TOKEN) {
  bot.launch().then(() => {
    console.log('bot start polling')
  })
} else {
  console.log("Token in .env not found.")
}
